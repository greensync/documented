#!/usr/bin/env ruby

require 'rubocop'

################################################################################
# Usage:
#   documented <file_path>
#
# Example:
#   documented spec/example_spec.rb
################################################################################

file_path = ARGV.first
code = File.read(file_path)
source = RuboCop::ProcessedSource.new(code, 3)
source_buffer = source.buffer
rewriter = Parser::Source::TreeRewriter.new(source_buffer)

# TODO: Don't need once we use temporary files instead of eval().
source.ast.children.filter { |child| child.deconstruct[2] == :require_relative }.map do |child|
  path = child.children.last.children.first
  range = child&.location&.expression
  rewriter.replace(range, "require File.expand_path('#{path}')")
end

setup = <<-RUBY
  \n require File.expand_path('../lib/documented')
  Documented.setup(source)
RUBY
rewriter.insert_after(source.ast.children.first.loc.expression, setup)

source.comments.each do |comment|
  range = comment.location.expression

  if comment.text.start_with?('# documented:enable')
    rewriter.replace(range, "Documented.enable")
  elsif comment.text.start_with?('# documented:disable')
    rewriter.replace(range, "Documented.disable")
  end
end

# TODO: Create a temporary files instead and run as `bundle exec rspec <filepath>`
eval(rewriter.process)
