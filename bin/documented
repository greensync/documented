#!/usr/bin/env ruby

# require 'parser/current'
# require 'unparser'
require 'rubocop'

################################################################################
# Usage:
#   documented <file_path>
#
# Example:
#   documented spec/example_spec.rb
################################################################################

METHOD_NAME = 2.freeze

file_path = ARGV.first

code = File.read(file_path)
source = RuboCop::ProcessedSource.new(code, 3)
source_buffer = source.buffer
rewriter = Parser::Source::TreeRewriter.new(source_buffer)

source.ast.children.filter { |child| child.deconstruct[METHOD_NAME] == :require_relative }.map do |child|
  path = child.children.last.children.first
  range = child&.location&.expression
  
  rewriter.replace(range, "require File.expand_path('#{path}')")
end

first_child_range = source.ast.children.first.loc.expression
new_tracer = <<-RUBY

  require File.expand_path('../lib/documented')
  Documented.setup()
RUBY
rewriter.insert_after(first_child_range, new_tracer)

source.comments.each do |comment|
  if comment.text.start_with?('# documented:enable')
    range = comment.location.expression
    rewriter.replace(range, "Documented.tracer.enable")
  elsif comment.text.start_with?('# documented:disable')
    range = comment.location.expression
    rewriter.replace(range, "Documented.tracer.disable")
  end
end

# TODO: Create a temporary files instead and run as `bundle exec rspec <filepath>`
eval(rewriter.process)
